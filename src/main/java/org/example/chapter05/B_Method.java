package org.example.chapter05;

/*
    === 함수 Function VS 메서드 Method ===
    : 자바에서는 '함수'의 개념이 없음 => 그래서 메서드가 함수의 역할을 함
    - 모든 함수 체계는 '클래스 내부의 메서드'로 사용됨
    - 변수도 없음 => 필드임

    1. 함수
    : 특정 작업을 수행하는 코드블럭
      - 독립적으로 존재, 클래스 소속이 아님
      - 직접 호출해야함 => 함수명();
            >>> 얘네들은 파이썬, JS 등에 있음

    2. 메서드
    : 객체의 동작을 정의한 코드블럭
      - 클래스 내부에 포함됨. 객체의 행위와 연결되어야함
      - 객체 생성 후 .연산자 를 통해 호출 => 객체명.메서드명();
            >>> 자바, C#에서 쓰임

 */

// === 메서드 === //
//: 객체의 특정 작업을 하나로 묶은 것
//  - 어떠한 값들을 입력하면 해당 값들로 작업을 수행해 결과를 반환함.

// 1) 메서드의 구조: 선언부, 구현부
//    - 반환타입 메서드명 () {} => 소괄호까지가 선언문 중괄호 내부가 구현부
// 변수는 '선언'을 함. 메서드는 '정의'를 함 => 정의: 선언부와 구현부를 작성한다

// +) 매개변수(parameter) 선언
// : 메서드가 작업을 수행하는데 필요한 값을 제공받음
//   >>>필요한 개수만큼 선언해야하고 데이터 타입 생략이 불가능하다 그리고 데이터 생략도 불가함

// +) 구현부
// : 반환 타입이 void가 아닐경우 반드시 return 반환타입데이터 가 있어야함
//   >> 반환값은 명시된 타입과 일치하거나 자동 형 변환이 가능해야함

class Example {
    int x, y; //인스턴스 필드

    //반환타입 O, 매개변수 O

    int add(int x, int y) {
        //파라미터 (매개변수//지역변수)
        int result = x+y;
        return result;
    }

    //반환타입 O, 매개변수 X
    double multiply() {
        int result = x * y;
        return result;
    }

    //반환타입 X, 매개변수 X
    void print99dan () {
        for (int i = 1; i <8; i ++){
            for (int j = 0; j<8; j++){
                System.out.print(j * i + "");
            }
            System.out.println();
        }
    }

}


public class B_Method {
    public static void main(String[] args) {
        Example example = new Example();

        example.print99dan();

        // == 매개변수(parameter) VS 인자(argument) == //
        // 1. 매개변수: 메서드 정의 시 소괄호 안에 선언되는 (지역)변수
        //  - 호출 시 값을 전달받아 구현부 내에서 사용하는 용도

        // 2. 인자(인수): 메서드를 호출할 때 ()에 전달되는 값
        //  - 실제 데이터를 전달하는 역할을 함 => 메서드 호출부에서 전달해 매개변수에 저장됨.

        //example.add(1);
        //example.add(1,2,3);
        // ▲ 인자값과 매개변수의 수는 같아야하고, 타입의 순서나 같거나 자동형 변환이 가능해야함

//        example.add("1","2");

        example.add('1','2'); // => 자동형 변환이 가능함
        example.add(10,20); // => 제일 이상적인거...

    }
}
